name: Tests Ubuntu

on:
  push:
  pull_request:
  release:
    types: [created]
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: sudo apt-get install flex bison
      
    - name: Build Virus Macrophage project
      run: |
        make virus-macrophage-sample
        make
        
    - name: Run Virus Macrophage cell lines project
      run: |
        ./virus-sample
        
  build_physimess:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: sudo apt-get install flex bison
      
    - name: Build PhysiMeSS project
      run: |
        make physimess-sample
        make
        
    - name: Run PhysiMeSS project
      run: |
        ./project
        ./project config/Fibre_Initialisation/mymodel_initialisation.xml
        ./project config/Cell_Fibre_Mechanics/mymodel_rotating.xml
        
  build_physiboss_cell_lines:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: sudo apt-get install flex bison
  
    - name: Build PhysiBoSS cell lines project
      run: |
        make physiboss-cell-lines-sample
        make clean
        make
        
    - name: Run PhysiBoSS cell lines project
      run: |
        ./PhysiBoSS_Cell_Lines

  build_physiboss_TNF:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: sudo apt-get install flex bison
  
    - name: Build PhysiBoSS tnf model
      run: |
        make physiboss-tnf-model
        make clean
        make
        
    - name: Run PhysiBoSS TNF project
      run: |
        ./spheroid_TNF_model
        
         
  build_physiboss_tutorial:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Build PhysiBoSS tutorial
      run: |
        make physiboss-tutorial
        make clean
        make Compile_MaBoSS
        make static STATIC_OPENMP=/usr/lib/gcc/x86_64-linux-gnu/11/libgomp.a
        ldd project
        
    - name: Run PhysiBoSS tutorial
      run: |
        ./project config/cell_cycle/PhysiCell_settings_cell_cycle_2D.xml
        
    - name: Build project archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf tutorial-linux.tar.gz project Makefile main.cpp config/ custom_modules/

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: tutorial_binary_linux
        path: project

         
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: tutorial-linux.tar.gz
        asset_path: /home/runner/work/PhysiBoSS/PhysiBoSS/tutorial-linux.tar.gz
        asset_content_type: application/gzip   
        
  build_physiboss_cancer_invasion:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Build PhysiBoSS Cancer Invasion
      run: |
        make physiboss-tutorial-invasion
        make clean
        make Compile_MaBoSS
        make static STATIC_OPENMP=/usr/lib/gcc/x86_64-linux-gnu/11/libgomp.a
        ldd invasion_model
        
    - name: Run PhysiBoSS cancer invasion
      run: |
        ./invasion_model config/PhysiCell_settings_2D.xml
        
    - name: Build project archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf invasion_model-linux.tar.gz invasion_model Makefile main.cpp config/ custom_modules/

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: invasion_model_binary_linux
        path: invasion_model

        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: invasion_model-linux.tar.gz
        asset_path: /home/runner/work/PhysiBoSS/PhysiBoSS/invasion_model-linux.tar.gz
        asset_content_type: application/gzip
  
  build_physiboss_template:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Build PhysiBoSS Template
      run: |
        make template_BM
        make clean
        make Compile_MaBoSS
        make static STATIC_OPENMP=/usr/lib/gcc/x86_64-linux-gnu/11/libgomp.a
        ldd template_BM
        
    - name: Run PhysiBoSS model
      run: |
        ./template_BM
        
    - name: Build project archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf template_BM-linux.tar.gz template_BM Makefile main.cpp config/ custom_modules/

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: template_BM_binary_linux
        path: template_BM

        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: template_BM-linux.tar.gz
        asset_path: /home/runner/work/PhysiBoSS/PhysiBoSS/template_BM-linux.tar.gz
        asset_content_type: application/gzip
        
    
    
  build_physiboss_celllines_invasion:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Build PhysiBoSS Cell lines
      run: |
        make physiboss-cell-lines-sample
        make clean
        make Compile_MaBoSS
        make static STATIC_OPENMP=/usr/lib/gcc/x86_64-linux-gnu/11/libgomp.a
        ldd PhysiBoSS_Cell_Lines
        
    - name: Run PhysiBoSS model
      run: |
        ./PhysiBoSS_Cell_Lines
        
    - name: Build project archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf physiboss-cell-lines-linux.tar.gz PhysiBoSS_Cell_Lines Makefile main.cpp config/ custom_modules/

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with: 
        name: physiboss_cell_lines_binary_linux
        path: PhysiBoSS_Cell_Lines

        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: physiboss-cell-lines-linux.tar.gz
        asset_path: /home/runner/work/PhysiBoSS/PhysiBoSS/physiboss-cell-lines-linux.tar.gz
        asset_content_type: application/gzip